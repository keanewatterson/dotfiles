{{ if eq .instance.os_distro "debian-rpi" }}
rpi_get_throttle() {
    local result=$(vcgencmd get_throttled)
    local hex_value=${result#*=}
    local decimal_value=$((hex_value))
    
    if [[ $decimal_value -eq 0 ]]; then
        echo "No throttling or power issues detected ($hex_value)"
        return 0
    fi
    
    echo "Throttled state: $result"
    echo "Bit breakdown:"
    
    # Define bit meanings
    local bits=(
        "0:Under-voltage detected"
        "1:Arm frequency capped"
        "2:Currently throttled"
        "3:Soft temperature limit active"
        "4:Reserved"
        "5:Reserved"
        "6:Reserved"
        "7:Reserved"
        "8:Reserved"
        "9:Reserved"
        "10:Reserved"
        "11:Reserved"
        "12:Reserved"
        "13:Reserved"
        "14:Reserved"
        "15:Reserved"
        "16:Under-voltage has occurred"
        "17:Arm frequency capping has occurred"
        "18:Throttling has occurred"
        "19:Soft temperature limit has occurred"
    )
    
    # Convert to binary and process each bit
    local binary=$(echo "obase=2; $decimal_value" | bc)
    binary=$(printf "%020d" $binary) # Pad to 20 bits
    
    local issues_found=0
    
    for ((i=0; i<${#binary}; i++)); do
        local bit_index=$((19 - i))  # MSB first (bit 19 is first character)
        local bit_value=${binary:$i:1}
        
        if [[ $bit_value -eq 1 ]]; then
            if [[ $bit_index -le 19 ]]; then
                echo "  Bit $bit_index: ${bits[bit_index]#*:}"
                issues_found=1
            else
                echo "  Bit $bit_index: Unknown/Reserved"
                issues_found=1
            fi
        fi
    done
    
    if [[ $issues_found -eq 0 ]]; then
        echo "  No issues detected (unexpected result)"
    fi
}
{{ end -}}
